name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read

env:
  GO_VERSION: '1.21'
  TF_ACC: 1
  KEEP_API_URL: http://localhost:8080

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run unit tests
        run: |
          go test -v -short -coverprofile=coverage.txt -covermode=atomic ./...

  acceptance-tests:
    name: Acceptance Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'  # Only run on push or manual trigger
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run acceptance tests
        env:
          KEEP_API_KEY: ${{ secrets.KEEP_API_KEY }}
        run: |
          # Only run mapping rule tests which are production-ready
          cd internal/provider
          go test -v -run TestAccMappingRuleResource

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.54.2
          args: --timeout 5m

  release-check:
    name: Check Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check for changes in provider code
        id: changes
        uses: tj-actions/changed-files@v41
        with:
          files: |
            internal/**
            go.mod
            go.sum

      - name: Set outputs
        if: steps.changes.outputs.any_changed == 'false'
        run: |
          echo "No changes in provider code. Skipping release."
          echo "skip_release=true" >> $GITHUB_OUTPUT

      - name: Check if version exists in CHANGELOG.md
        if: steps.changes.outputs.any_changed == 'true'
        id: check-version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          if ! grep -q "## \[${VERSION}\]" CHANGELOG.md; then
            echo "Version ${VERSION} not found in CHANGELOG.md"
            exit 1
          fi

  acceptance:
    name: Acceptance Tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Run acceptance tests
        run: make testacc
        env:
          KEEP_API_KEY: ${{ secrets.KEEP_API_KEY }}
          KEEP_API_URL: ${{ secrets.KEEP_API_URL || 'http://localhost:8080' }}
